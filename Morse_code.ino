/*=========================================================
LHW开发
邮箱:1281702594@qq.com
采用CC协议 https://creativecommons.org/licenses/by-nc-nd/2.5/cn/
提示：有个小彩蛋
=========================================================*/
#include <Arduboy2.h>
Arduboy2 arduboy;
/*=========================================================
                         变量
  =========================================================*/
byte TFL = 21; //过滤掉的电平 用于过滤干扰
byte Buffer[128]; //记录波形
int DPin = A0; //数据接收口
int ML, MS; //最长最短间隔
byte DT;//刷新画面间隔 单位 程序周期
bool EL = false; //电平情况
bool NEL; //现在电平情况
int CIT1, CIT2; //开始和上一次时间
int CILTF = 6; //电码 间隔 电平 时间 容错   不能太高或太低 太高会导致精准度下降 如果信号源质量不行 太低也会无法识别
int DTO = 3000; //接收超时 单位：ms
byte DTT[10]; //缓存的数据表 0代表在点的间隔低电平 1代表点 2代表划
byte DTL = 255; //缓存写入的位置 255代为禁用 也就是说没信号
//码库
long MH[36] = {
  1020202020,
  1010202020,
  1010102020,
  1010101020,
  1010101010,
  2010101010,
  2020101010,
  2020201010,
  2020202010,
  2020202020,
  1020000000,
  2010101000,
  2010201000,
  2010100000,
  1000000000,
  1010201000,
  2020100000,
  1010101000,
  1010000000,
  1020202000,
  2010200000,
  1020101000,
  2020000000,
  2010000000,
  2020200000,
  1020201000,
  2020102000,
  1020100000,
  1010100000,
  2000000000,
  1010200000,
  1010102000,
  1020200000,
  2010102000,
  2010202000,
  2020101000
};
byte ME[36] = {
  49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
};  //字码库对应ascii
byte TmpString[21]; //接收数据缓存显示区
byte EGG[10] = {74, 73, 78, 71, 74, 85, 67, 65, 84, 83};   //哈哈，我才不会告诉你这是什么，或许可以发送来看看？
const unsigned char EggBmp[] PROGMEM = {0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x00, 0x01, 0x20, 0x00, 0x00, 0x05, 0xf8, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x01, 0x10, 0x00, 0x00, 0x0b, 0xf8, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xc0, 0x01, 0x0c, 0x00, 0x00, 0x13, 0xf8, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x20, 0x01, 0x03, 0x00, 0x00, 0x27, 0xf8, 0x00, 0xf0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xfe, 0x18, 0x01, 0x00, 0xe1, 0x80, 0x47, 0xf8, 0x00, 0x77, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0xff, 0x04, 0x01, 0x00, 0x10, 0xc0, 0x8f, 0xf8, 0x00, 0x7f, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x00, 0xff, 0x82, 0x00, 0x80, 0x06, 0x21, 0x0f, 0xf8, 0x01, 0xff, 0xc0, 0x00, 0x3c, 0x04, 0x00, 0x00, 0xff, 0xc1, 0x9f, 0xc0, 0x02, 0x26, 0x1f, 0xf8, 0x0f, 0xfc, 0x00, 0x70, 0x3c, 0x06, 0x00, 0x00, 0xff, 0xc0, 0x60, 0x30, 0x00, 0x28, 0x1f, 0xf8, 0x3f, 0xc0, 0x01, 0xf0, 0x3c, 0x07, 0x01, 0x00, 0xff, 0xe3, 0x00, 0x00, 0x00, 0x30, 0x3f, 0xf8, 0x7f, 0x3c, 0x07, 0xf0, 0x1c, 0x07, 0xc3, 0x80, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x20, 0x7f, 0xf8, 0x38, 0x7e, 0x04, 0xe0, 0x1c, 0x07, 0xe3, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x20, 0x7f, 0xf8, 0x00, 0xfe, 0x04, 0xe0, 0x7c, 0x67, 0xf7, 0xc0, 0xfe, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x01, 0xff, 0x0d, 0xe3, 0x3c, 0x2f, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x01, 0xce, 0x07, 0xc3, 0xbc, 0x3f, 0xb5, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x03, 0x8e, 0x07, 0xd3, 0xbc, 0x3d, 0xb0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x01, 0x9e, 0x06, 0x7b, 0xbc, 0x78, 0x8f, 0x80, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x01, 0xfc, 0x06, 0x7f, 0xbc, 0xfc, 0x03, 0xc0, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x01, 0xfc, 0x07, 0xf3, 0xfd, 0xfc, 0x83, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0xf2, 0x07, 0xe0, 0x7f, 0x8d, 0x63, 0x60, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x33, 0x07, 0xf8, 0x7e, 0x1c, 0xd3, 0xa0, 0x7f, 0xf7, 0xfc, 0x00, 0x03, 0xfe, 0x7f, 0xe0, 0x00, 0x31, 0x8d, 0xb8, 0x7c, 0x3c, 0xc3, 0x60, 0x7f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xbf, 0xe0, 0x02, 0x31, 0xff, 0xb8, 0xf8, 0x6c, 0x45, 0x00, 0x7f, 0xef, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xe0, 0x0e, 0x31, 0xf9, 0xf0, 0xf8, 0x0c, 0x7e, 0xc0, 0x7f, 0xc7, 0xff, 0xc0, 0x1f, 0xff, 0xbf, 0xe0, 0x1e, 0x31, 0xf8, 0xe0, 0xf8, 0x1c, 0x7d, 0x80, 0x7f, 0xc3, 0xff, 0x80, 0x1f, 0xfe, 0x1f, 0xe0, 0x3e, 0x30, 0x00, 0x00, 0xf8, 0x00, 0x3b, 0x00, 0x7f, 0x80, 0x07, 0x00, 0x0f, 0x00, 0x1f, 0xc0, 0x7c, 0x70, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x0c, 0x30, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0x03, 0x7c, 0x00, 0x01, 0xfe, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0x06, 0xde, 0x00, 0x06, 0xfb, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c, 0xcf, 0x00, 0x0e, 0x79, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x18, 0xff, 0x80, 0x07, 0xfc, 0xc3, 0x03, 0xba, 0x4e, 0xe9, 0x31, 0x9d, 0xc3, 0x19, 0xb0, 0x04, 0x19, 0xfd, 0x00, 0x17, 0xec, 0xc1, 0x01, 0x13, 0x50, 0x49, 0x4a, 0x4a, 0x04, 0xa5, 0x50, 0x08, 0x18, 0xbf, 0x00, 0x07, 0xfc, 0xc0, 0x81, 0x13, 0x56, 0x49, 0x43, 0xc9, 0x84, 0x25, 0x50, 0x08, 0x0c, 0x9b, 0x47, 0x16, 0xe9, 0x80, 0x81, 0x12, 0xd2, 0x49, 0x4a, 0x48, 0x44, 0xa5, 0x50, 0x08, 0x06, 0x82, 0x05, 0x0a, 0x09, 0x81, 0x03, 0x3a, 0x4e, 0xc6, 0x32, 0x4b, 0x93, 0x19, 0x50, 0x04, 0x03, 0x3d, 0x07, 0x05, 0xb2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xc0, 0x02, 0x00, 0x00, 0x06, 0x01, 0xe4, 0xff, 0xe0, 0x00, 0x00, 0x02, 0x00, 0x00, 0x77, 0xf8, 0x00, 0x04, 0x00, 0x00, 0x7f, 0xe7, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x08, 0x00, 0x00, 0x40, 0x41, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x08, 0x00, 0x00, 0x08, 0x0f, 0xfc, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x7f, 0xf0, 0x00, 0x10, 0x00, 0x00, 0xff, 0xc1, 0x0c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x7f, 0xf0, 0x00, 0x20, 0x00, 0x00, 0x31, 0x03, 0x8c, 0x09, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x3f, 0xe0, 0x00, 0x40, 0x00, 0x00, 0x32, 0x03, 0x54, 0x08, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x18, 0x10, 0x00, 0x80, 0x00, 0x00, 0x1e, 0x05, 0x54, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x08, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x44, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x04, 0x06, 0x00, 0x00, 0x00, 0x39, 0x81, 0x5c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0x16, 0x02, 0x1c, 0x00, 0x00, 0x00, 0x60, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf2, 0x10, 0x02, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x40, 0x20, 0x01, 0x84, 0x00, 0x7f, 0xc0, 0x20, 0x08, 0x02, 0x10, 0xff, 0xe2, 0x24, 0x00, 0x1f, 0xfc, 0x20, 0x00, 0xff, 0x00, 0x0c, 0x00, 0x20, 0x18, 0x0f, 0xfe, 0x04, 0x07, 0xfe, 0x00, 0x3f, 0xf0, 0x20, 0x00, 0xff, 0xe0, 0x0c, 0x07, 0xff, 0x7f, 0xc7, 0xf8, 0x04, 0x06, 0x24, 0x00, 0xff, 0xf0, 0x1e, 0x40, 0xff, 0xf8, 0x0c, 0x00, 0x20, 0x40, 0xcf, 0x18, 0x0e, 0x07, 0xfe, 0x01, 0xff, 0xf0, 0x10, 0x20, 0x3f, 0xf8, 0xff, 0xe0, 0x60, 0x40, 0xc7, 0xfe, 0x0f, 0x8e, 0x00, 0x01, 0xff, 0xf4, 0x10, 0x00, 0x3f, 0xfc, 0x0e, 0x00, 0xe0, 0x7f, 0xc7, 0xfe, 0x36, 0xcf, 0xfe, 0x03, 0xff, 0xe4, 0x10, 0x00, 0x3f, 0xfc, 0x0e, 0x01, 0xa0, 0x40, 0xc7, 0x90, 0x26, 0x42, 0x64, 0x03, 0xff, 0xe0, 0x0d, 0x80, 0x9f, 0xfc, 0x1b, 0x03, 0x20, 0x40, 0xcf, 0xfe, 0xc6, 0x46, 0x7e, 0x03, 0xff, 0xf2, 0x07, 0x80, 0x9f, 0xfc, 0x31, 0x8e, 0x20, 0x40, 0xc3, 0xc4, 0x06, 0x03, 0xe4, 0x01, 0xff, 0xf2, 0x0c, 0xc1, 0x3f, 0xfc, 0x60, 0xe0, 0x60, 0x7f, 0xc7, 0xfe, 0x06, 0x07, 0x7e, 0x01, 0xff, 0xf1, 0xff, 0xfe, 0x3f, 0xfc, 0xc0, 0x40, 0x60, 0x40, 0xc2, 0x64, 0x06, 0x02, 0x64, 0x00, 0xff, 0xf0, 0x7f, 0xf4, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0xfb, 0xf8, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
byte EGGN;//彩蛋计数
/*=========================================================
                     只循环一次
  =========================================================*/
void setup()
{
  arduboy.boot();
  pinMode(DPin, INPUT); //初始化接收pin口
  Serial.begin(115200);   //初始化串口比特率
  setP4( );   // Prescaler = 4
  //setP8( );   // Prescaler = 8
  //setP16( );   // Prescaler = 16
  //setP32( ); // Prescaler = 32
  //setP128( ); // Prescaler = 128 = default
}

/*=========================================================
                     不停循环
  =========================================================*/
void loop()
{
  key(); //按键检测
  sampling(); //采样

  if (DT == 64) {  //跳帧节约系统资源
    Draw();
    DT = 0;
  } else {
    DT++;
  }

}
/*=========================================================
                     按键检测
  =========================================================*/
void key() {
  if ((arduboy.pressed(UP_BUTTON)) && (TFL < 31)) TFL++;
  if ((arduboy.pressed(DOWN_BUTTON)) && (TFL > 0)) TFL--;
}
/*=========================================================
                     显示
  =========================================================*/
void Draw() {
  arduboy.clear();
  DrawWav();  //显示波形
  arduboy.setCursor(0, 0);

  for (int i = 0; i < 21; i++) {
    arduboy.print(char(TmpString[i]));
  }

  arduboy.setCursor(0, 8);
  arduboy.print("ML:");
  arduboy.print(ML);
  arduboy.setCursor(64, 8);
  arduboy.print("MS:");
  arduboy.print(MS);
  arduboy.setCursor(0, 16);
  arduboy.print("DTL:");
  arduboy.print(DTL);
  arduboy.setCursor(45, 16);
  arduboy.print("DTT:");
  for (int i = 0; i < 10; i++) {
    arduboy.print(DTT[i]);
  }
  for (int i = 0; i < 10; i++) {    //增加气氛...我知道这注释很扯...管他的
    if (TmpString[i + 11] == EGG[i]) {
      EGGN++;
    } else EGGN = 0;
  }
  if (EGGN == 10) VEGG();
  arduboy.display();
}
/*=========================================================
                     VEGG
  =========================================================*/
void VEGG() {
  arduboy.clear();
  arduboy.drawSlowXYBitmap(0, 0, EggBmp, 128, 64, 1);
  arduboy.display();
  while (1) {}
}
/*=========================================================
                     清除数据缓冲
  =========================================================*/
void CM() {
  for (int i = 0; i < 10; i++) DTT[i] = 0;
}
/*=========================================================
                     译码
  =========================================================*/
void translation()
{
  if (CIT2 >= ML - CILTF && CIT2 <= ML + CILTF && ML != 0 && EL == true) {
    //合法数据 写入缓存
    DTT[DTL] = 2;
    DTL++;
  } else {
    if (CIT2 >= MS - CILTF && CIT2 <= MS + CILTF && MS != 0 && EL == true) {
      //合法数据 写入缓存

      DTT[DTL] = 1;
      DTL++;
    } else {
      if (CIT2 >= MS - CILTF && CIT2 <= MS + CILTF && MS != 0 && EL == false) {
        //合法数据 写入缓存
        DTT[DTL] = 0;
        DTL++;
      }
    }
  }
  TOStr(); //超时合并字符串
}
/*=========================================================
                     超时合并字符串
  =========================================================*/
void TOStr() {
  if (( millis() / 10.0) >= CIT1 + DTO) { //译码时间超时 确认不在有数据 数据合并
    //数据接收完成 查询数据库
    String TXT;
    for (int i = 0; i < 10; i++) {   //把接收区缓存合成字符串
      TXT = TXT + DTT[i];
    }
    for (int i = 0; i < 36; i++) {    //匹配数据库信号
      if (String(MH[i]) == TXT) {
        Serial.println(char(ME[i]));
        //执行显示区数据移位
        for (byte i = 0; i < 20; i++) {
          TmpString[i] = TmpString[i + 1];
        }
        TmpString[20] = ME[i]; //写到显示区最后的位置
        CM();
      }
    }
    DTL = 255; //无信号 禁用译码
  }
}
/*=========================================================
                     计算间隔
  =========================================================*/
void Minterval() {
  if (map(Buffer[127], 63, 31, 0, 31) >= TFL) NEL = true; else NEL = false; //根据过滤获取电平情况
  if (NEL != EL) {
    //电平发生了变化
    CIT2 = ( millis() / 10.0) - CIT1;
    CIT1 = millis() / 10.0; //获取开始计算时的时间
    if (DTL != 255) translation(); //译码
    //计算最长和最短电平
    if (EL == true) {
      if (CIT2 > MS ) {
        if (CIT2 >= ML - CILTF && CIT2 <= ML + CILTF || ML == 0) {
          ML = CIT2;
          DTO = ML + CILTF;
        } else {
          if (CIT2 > ML && CIT2 <= ML * 4) {
            ML = CIT2;
            DTO = ML + CILTF;
          }
        }
      }
    } else {
      //低电平
      if (CIT2 >= DTO) {
        //在稍微长的时间收到信号  可能是数据开头 到这里代表已经成功学习信号规律
        DTL = 0; //写入位置为0
        CM();
      }

    }
    if (CIT2 <= ML - CILTF && CIT2 > 5) {
      MS = CIT2;
    }
    EL = !EL; //反转电平状态
  }
  if (( millis() / 10.0) >= CIT1 + DTO && DTL != 255) {
    TOStr(); //超时
  }
}
/*=========================================================
                     采样和移位
  =========================================================*/
void sampling() {
  //执行数据移位
  for (byte i = 0; i < 127; i++) {
    Buffer[i] = Buffer[i + 1];
  }
  //执行采样
  Buffer[127] = map(analogRead(DPin), 0, 1023, 63, 31);
  Minterval();
}
/*=========================================================
                     画出波形
  =========================================================*/
void DrawWav() {
  //显示波形输入
  for (byte i = 0; i < 127; i++) {
    arduboy.drawLine(i, 64, i, Buffer[i], 1);
  }
  arduboy.drawLine(0, 31, 128, 31, 1);  //波形上端的隔离线
  arduboy.drawLine(0, map(TFL, 0, 31, 63, 31), 128, map(TFL, 0, 31, 63, 31), 1); //干扰过滤线
}
/*=========================================================
                     ADC深度设置
  =========================================================*/
void setP32( ) {
  Serial.println("ADC Prescaler = 32");  // 101
  ADCSRA |=  (1 << ADPS2);  // 1
  ADCSRA &=  ~(1 << ADPS1);  // 0
  ADCSRA |=  (1 << ADPS0);  // 1
}
void setP16( ) {
  Serial.println("ADC Prescaler = 16");  // 100
  ADCSRA |=  (1 << ADPS2);  // 1
  ADCSRA &=  ~(1 << ADPS1);  // 0
  ADCSRA &=  ~(1 << ADPS0);  // 0
}
void setP8( ) {  // prescaler = 8
  Serial.println("ADC Prescaler = 8");  // 011
  ADCSRA &=  ~(1 << ADPS2);  // 0
  ADCSRA |=  (1 << ADPS1);  // 1
  ADCSRA |=  (1 << ADPS0);  // 1
}
void setP4( ) {  // prescaler = 4
  Serial.println("ADC Prescaler = 4");  // 010
  ADCSRA &=  ~(1 << ADPS2);  // 0
  ADCSRA |=  (1 << ADPS1);  // 1
  ADCSRA &=  ~(1 << ADPS0);  // 0
}
void setP128( ) { // 默認就是這樣
  Serial.println("ADC Prescaler = 128");  // 111
  ADCSRA |=  (1 << ADPS2);  // 1
  ADCSRA |=  (1 << ADPS1);  // 1
  ADCSRA |=  (1 << ADPS0);  // 1
} // setP128
